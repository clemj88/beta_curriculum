# Pattern Matching With Collections

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively, you can evaluate the Elixir cells as you read.

## Pattern Matching With Collections

In Elixir, the `=` sign is the match operator. In other programming languages, you may call it the assignment operator.

Elixir calls `=` the match operator because it uses pattern matching to bind variables.

What is pattern matching? Well rather than simply assigning values to variables, Elixir allows
you to bind variables on the left-hand side of the `=`. So long as it matches the same shape of the right hand side of the `=`.

For example, the following expression is the most "strict" match possible. Both sides are exactly equal.

```elixir
{1, 2, 3} = {1, 2, 3}
```

The `=` operator attempts to coerce the left side value to match the right side value, so when we write the following expression, we bind `my_tuple` to `{1, 2, 3}` in order to make the right and the left side match.

The coercion to match is less obvious with a simple variable name, because it's like a blank canvas, it can match any value.

```elixir
my_tuple = {1, 2, 3}
```

However, we can bind other values inside of a container data type, so the left and right side still match.

```elixir
{one, two, three} = {1, 2, 3}
```

But you can also use pattern matching to bind values within a data type.

```elixir

```

So long as the expression on the left side of match operator `=` matches the pattern of the right side,
you can bind variables to values.

Here's the same concept with a list

```elixir
[hero, secret_identity] = ["Spider Man", "Peter Parker"]

hero
```

This binds a new variable. If you aren't concerned about a value then you can use underscore `_`
to ignore it.

```elixir
[_, secret_identity] = ["Spider Man", "Peter Parker"]

secret_identity
```

However, if the left hand side doesn't match the right hand side, then the code will crash with
a **MatchError**.

```elixir
# The following crashes because a list with 1 element does not match a list with two elements.
[name] = ["Spider Man", "Peter Parker"]
```

You can pattern match with any kind of data. So long as the left side matches the right side.

### Your Turn

Use pattern matching to bind `"jewel"` to a variable called `jewel`.
Replace `jewel` with your answer.

```elixir
[_, _, jewel] = [1, 2, "jewel"]

Utils.feedback(:jewel, jewel)

jewel
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish match operator section"
```

## Up Next

| Previous                                                       | Next                                             |
| -------------------------------------------------------------- | -----------------------------------------------: |
| [Comparison Operators](../reading/comparison_operators.livemd) | [Fun Formulas](../exercises/fun_formulas.livemd) |
